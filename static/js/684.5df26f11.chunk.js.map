{"version":3,"file":"static/js/684.5df26f11.chunk.js","mappings":"kLACA,EAAuB,mB,SCKvB,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAWC,EAAa,SAAEF,EAAMG,UAC9C,E,SCHA,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BCwDnI,EApDkB,SAACH,GACjB,IAAMI,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAuBrB,OACE,SAAC,EAAAE,SAAQ,WACT,SAAC,EAAI,WACH,kBAAMN,UAAWC,EAAcM,SAtBnC,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBP,EAAeQ,QAAQC,MACvCC,EAAcR,EAAaM,QAAQC,MAEpCF,EAAcI,QAAUD,EAAYC,OAIzCf,EAAMgB,WAAW,CAAEC,OAAQN,EAAeO,KAAMJ,IAH5CK,OAAOC,QAAQ,qBAKrB,EAU+D,UACxDpB,EAAMqB,YACL,gBAAKpB,UAAWC,EAAgB,UAC9B,SAACoB,EAAA,EAAc,OAInB,iBAAKrB,UAAWC,EAAgB,WAC9B,kBAAOqB,QAAQ,SAAQ,qBACvB,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKtB,QAEtC,iBAAKH,UAAWC,EAAgB,WAC9B,kBAAOqB,QAAQ,OAAM,mBACrB,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKpB,QAEpC,gBAAKL,UAAWC,EAAgB,UAC9B,mBAAQD,UAAU,MAAK,+BAMjC,E,2BC/BA,MAjBA,WACA,OAA6B2B,EAAAA,EAAAA,GAAQC,EAAAA,IAA9BC,EAAW,EAAXA,YAAYC,EAAM,EAANA,OACZC,GAAWC,EAAAA,EAAAA,MAYlB,OAVCC,EAAAA,EAAAA,YAAU,WACI,cAAVH,GACDC,EAAQ,UAEX,GAAE,CAACD,EAAOC,KAMJ,SAAC,EAAS,CAACX,UAAoB,YAATU,EAAoBf,WAJvB,SAACmB,GACpBL,EAAYK,EACjB,GAGF,C","sources":["webpack://practice_project/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://practice_project/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","Page/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__uzRe6\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__YV-Tc\",\"loading\":\"QuoteForm_loading__-CWes\",\"control\":\"QuoteForm_control__DD+2j\",\"actions\":\"QuoteForm_actions__Fw9sn\"};","import { Fragment, useRef} from 'react';\nimport Card from '../UI/Card'\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    if(!(enteredAuthor.trim() && enteredText.trim())){\n        window.confirm(\"Please enter quote\")\n        return\n    }\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n\n  }\n\n\n\n\n\n\n  return (\n    <Fragment>\n    <Card>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className='btn'>Add Quote</button>\n        </div>\n      </form>\n    </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../components/hook/use-http';\r\nimport { addQuote } from '../components/lib/api';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nfunction NewQuote(){\r\nconst {sendRequest,status} = useHttp(addQuote)\r\n const History =  useNavigate();\r\n \r\n useEffect(()=>{\r\n  if(status ==='completed'){\r\n    History('/quotes')\r\n  }\r\n },[status,History])\r\n\r\n  const addQuoteHandler = (quoteData)=>{\r\n       sendRequest(quoteData)\r\n  }\r\n\r\nreturn <QuoteForm isLoading={status==='pending'} onAddQuote={addQuoteHandler}/>\r\n}\r\n\r\nexport default NewQuote"],"names":["props","className","classes","children","authorInputRef","useRef","textInputRef","Fragment","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","trim","onAddQuote","author","text","window","confirm","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","useHttp","addQuote","sendRequest","status","History","useNavigate","useEffect","quoteData"],"sourceRoot":""}